
================================================ Notes et mes remarques sur le GIT ====================================================================



======> git clone <url_https> permet de cloner un repository Git à partir d'une url distante

======> git init Permet d'initialiser un repertoire Git en local

======> git branch Permet de visualiser la liste des branches Git local

======> git branch <nom_de_la_new_branche> Permet de créer une nouvelle branche nommée <nom_de_la_new_branche> en local

======> git checkout <nom_de_la_branche> Permet de switcher vers la branche existante nommée <nom_de_la_branche>

======> git branch -u origin/<nom_de_la_branche> permet de lier la branche courante à la branche nommée <nom_de_la_branche> sur le serveur

======> TRES IMPORTANT : Pour lier un dépot cloner en local à un dépôt afin d'initialiser son git repository
		git remote add origin https://github.com/tochyvn/javaee.git

			----------------- git checkout <nom_de_la_branche> ------------------

NB : Lorsqu'on change de branche le code courant sur notre pc change aussi en fonction des modif sur elles  =====> voir explanation ci-dessous

Figure 16. HEAD est déplacé lors d’un checkout
Cette commande a réalisé deux actions. Elle a remis le pointeur HEAD sur la branche master et elle a replacé les fichiers de votre répertoire de travail dans l’état du snapshot pointé par master. Cela signifie aussi que les modifications que vous réalisez à partir de ce point divergeront de l’ancienne version du projet. Cette commande annule les modifications réalisées dans la branche test pour vous permettre de repartir dans une autre direction.

		----------------------------------------------------------------------------


=====> git log --oneline --decorate --graph --all  Elle va afficher l’historique de vos commits, affichant les endroits où sont positionnés vos pointeurs de branche ainsi que la manière dont votre historique a divergé

=====> git merge <nom_branche> Permet de merger la branche <nom_branche> à la branche courante

git branch -d <nom_branche> permet d'effacer la branche <nom_branche>



======================================================== PLUS ==============================================================================
============================================================================================================================================
============================================================================================================================================

Gestion des branches
Maintenant que vous avez créé, fusionné et supprimé des branches, regardons de plus près les outils de gestion des branches qui s’avèreront utiles lors d’une utilisation intensive des branches.

La commande git branch permet en fait bien plus que la simple création et suppression de branches. Si vous la lancez sans argument, vous obtenez la liste des branches courantes :

$ git branch
  prob53
* master
  test
Notez le caractère * qui préfixe la branche master : il indique la branche courante (c’est-à-dire la branche sur laquelle le pointeur HEAD se situe). Ceci signifie que si, dans cette situation, vous validez des modifications (grâce à git commit), le pointeur de la branche master sera mis à jour pour inclure vos modifications. Pour visualiser la liste des derniers commits sur chaque branche, vous pouvez utiliser le commande git branch -v :

$ git branch -v
  prob53   93b412c fix javascript issue
* master  7a98805 Merge branch 'prob53'
  test 782fd34 add scott to the author list in the readmes
--merged et --no-merged sont des options très utiles qui permettent de filtrer les branches de cette liste selon que vous les avez ou ne les avez pas encore fusionnées avec la branche courante. Pour voir quelles branches ont déjà été fusionnées dans votre branche courante, lancez git branch --merged :

$ git branch --merged
  prob53
* master
Comme vous avez déjà fusionné prob53 un peu plus tôt, vous la voyez dans votre liste. Les branches de cette liste qui ne comportent pas le préfixe * peuvent généralement être effacées sans risque au moyen de git branch -d puisque vous avez déjà intégré leurs modifications dans une autre branche et ne risquez donc pas de perdre quoi que ce soit.

Pour visualiser les branches qui contiennent des travaux qui n’ont pas encore été fusionnés, vous pouvez utiliser la commande git branch --no-merged  :

$ git branch --no-merged
  test
Ceci affiche votre autre branche. Comme elle contient des modifications qui n’ont pas encore été intégrées, essayer de les supprimer par la commande git branch -d se solde par un échec :

$ git branch -d test
error: The branch 'test' is not fully merged.
If you are sure you want to delete it, run 'git branch -D test'.
Si vous souhaitez réellement supprimer cette branche et perdre ainsi le travail réalisé, vous pouvez tout de même forcer la suppression avec l’option -D, comme l’indique le message.

======================================================== PLUS ==============================================================================
============================================================================================================================================
============================================================================================================================================


/********************************************************************************************************************************************/
***************************************** VOICI LE LIEN *************************************************************************************
***************************************** https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Gestion-des-branches **************************


===========================================================================================================================================
========================================== PETIT RESUME POUR INITIALISER MON PROJET GIT ===================================================
===========================================================================================================================================

===> Une fois son projet (JAVA PHP...) crée en local faire un GIT INIT pour initialiser le repository en local

===> Aller sur GIT et créer son repository avec un .gitignore selon le projet (PHP, JAVA, Symphony...)

===> on fait un GIT FETCH

===> faire la commande git remote add origin https://github.com/tochyvn/javaee.git 

les paramètres sont : 
                       ===>  "origin" representant le nom du remote distant à lier au projet
                       ===>  "https://github.com/tochyvn/javaee.git" l'url de ce remote distant

===> git branch -u origin/<nom_de_la_branche> permet de lier la branche courante à la branche nommée <nom_de_la_branche> sur le serveur

===> Faire git pull pour récupérer Le fichier gitignore et la licence et Readme


====> Ensuite ajouter les modifs puis les commit et push


=========================================================================================================================================
=============================== POUR LE SSH GIT ========================================================================================
https://git-scm.com/book/fr/v2/Git-sur-le-serveur-G%C3%A9n%C3%A9ration-des-cl%C3%A9s-publiques-SSH


